## Nested Loops in Java for DSA: A Concise Summary

Nested loops in Java involve placing one loop (the inner loop) entirely within the body of another loop
(the outer loop). The inner loop executes completely for each iteration of the outer loop.
This construct is fundamental in Data Structures and
Algorithms (DSA) for tasks involving multi-dimensional data or comparisons across elements.

**Key Concepts:**

* **Outer Loop:** Controls the number of times the inner loop will execute.
* **Inner Loop:** Executes repeatedly for each iteration of the outer loop.
* **Iteration Count:** If the outer loop runs n times and the inner loop runs m times
    for each outer loop iteration, the inner loop will execute a total of n × m times.
* **Index Variables:** Each loop typically uses an index variable to track its progress.
  It's crucial to use distinct variable names for the outer and inner loop indices (e.g., i for the outer,
   j for the inner).

**Common Use Cases in DSA:**

1.  **Processing 2D Arrays (Matrices):**
    ```
    int[][] matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    for (int i = 0; i < matrix.length; i++) { // Outer loop for rows
        for (int j = 0; j < matrix[i].length; j++) { // Inner loop for columns
            System.out.print(matrix[i][j] + " ");
        }
        System.out.println();
    }
    ```
    This pattern allows you to access and manipulate each element in a two-dimensional array.

2.  **Comparing Elements in an Array:**
    ```
    int[] arr = {5, 2, 8, 1, 9};
    for (int i = 0; i < arr.length; i++) {
        for (int j = i + 1; j < arr.length; j++) {
            if (arr[i] < arr[j]) {
                System.out.println(arr[i] + " is smaller than " + arr[j]);
            }
        }
    }
    ```
    Nested loops are used in algorithms like Bubble Sort and for finding pairs of elements that satisfy a
     certain condition.

3.  **Generating Combinations or Permutations:**
    Nested loops can be structured to generate different combinations or permutations of elements from a
    data set.

4.  **Graph Traversal (less direct, but conceptually related):** While explicit nested loops aren't always
used directly in advanced graph traversal algorithms,
the idea of iterating through neighbors of nodes can be seen as a form of nested iteration.

**Time Complexity Considerations:**

* Nested loops often contribute to higher time complexities. If an outer loop runs n times and
 an inner loop runs m times, the time complexity is typically O(n × m).
* Be mindful of the number of nested loops,
 as the complexity can increase exponentially (e.g., three nested loops might lead to O(n^3)
  complexity if each loop iterates n times).

**Control Flow Statements within Nested Loops:**

* `break`: Exits the innermost loop immediately.
* `continue`: Skips the current iteration of the innermost loop and proceeds to the next iteration.
* `return`: Exits the entire method, including all nested loops.

**In summary, nested loops are a powerful tool in Java for DSA,
 enabling you to iterate over multi-dimensional data structures and perform comparisons or
  operations across multiple elements.  Understanding their execution flow and
  potential impact on time complexity is crucial for designing efficient algorithms.**