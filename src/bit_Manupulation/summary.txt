Bit Manipulation Summary for DSA Problem Solving

Bit manipulation is a powerful technique in computer science that involves
 directly manipulating the individual bits (0s and 1s) of binary representations of numbers.
 It can lead to efficient and elegant solutions for various problems, especially in Data Structures and Algorithms (DSA). Understanding bitwise operators and their applications is crucial for optimizing space and time complexity.

**Key Bitwise Operators:**

1.  **AND (`&`)**: Performs a bitwise AND operation. The result has a 1 only if both corresponding bits in the operands are 1.
    * **Usage in DSA:**
        * **Checking if a bit is set:** `n & (1 << i)` checks if the i-th bit of `n` is 1.
        * **Masking:** Isolating specific bits.
        * **Finding common set bits:** `a & b` gives bits that are set in both `a` and `b`.

2.  **OR (`|`)**: Performs a bitwise OR operation. The result has a 1 if at least one of the corresponding bits in the operands is 1.
    * **Usage in DSA:**
        * **Setting a bit:** `n | (1 << i)` sets the i-th bit of `n` to 1.
        * **Combining bitmasks:** Merging sets of flags.

3.  **XOR (`^`)**: Performs a bitwise XOR (exclusive OR) operation. The result has a 1 only if the corresponding bits in the operands are different.
    * **Usage in DSA:**
        * **Toggling a bit:** `n ^ (1 << i)` flips the i-th bit of `n`.
        * **Finding the single unique element in an array:** XORing all elements cancels out duplicates.
        * **Checking if two numbers are different:** `a ^ b` will be non-zero if `a` and `b` differ in any bit.
        * **Swapping two numbers without a temporary variable:** `a = a ^ b; b = a ^ b; a = a ^ b;`

4.  **NOT (`~`)**: Performs a bitwise NOT (complement) operation. It inverts all the bits of the operand (0 becomes 1, and 1 becomes 0).
    * **Usage in DSA:**
        * Creating masks with all bits set except for a specific range. Be mindful of how negative numbers are represented (two's complement).

5.  **Left Shift (`<<`)**: Shifts the bits of the operand to the left by a specified number of positions. This is equivalent to multiplying by 2 raised to the power of the shift amount.
    * **Usage in DSA:**
        * Efficient multiplication by powers of 2.
        * Creating bitmasks (e.g., `1 << i` creates a mask with only the i-th bit set).

6.  **Right Shift (`>>`)**: Shifts the bits of the operand to the right by a specified number of positions.
    * **Logical Right Shift (unsigned):** Fills the vacated bits on the left with 0s.
    * **Arithmetic Right Shift (signed):** Preserves the sign bit (most significant bit) by filling the vacated bits with the sign bit.
    * **Usage in DSA:**
        * Efficient division by powers of 2.
        * Extracting specific bit ranges.

**Common Bit Manipulation Techniques and Usage in DSA Problems:**

* **Checking if a number is a power of 2:** `n > 0 && (n & (n - 1)) == 0`. This works because a power of 2 has only one bit set.
* **Counting set bits (Hamming weight):** Efficiently counting the number of 1s in the binary representation of a number. Various algorithms exist (e.g., iterating through bits, using `n & (n - 1)` to clear the least significant set bit).
* **Finding the i-th bit:** `(n >> i) & 1`.
* **Setting the i-th bit:** `n | (1 << i)`.
* **Clearing the i-th bit:** `n & ~(1 << i)`.
* **Toggling the i-th bit:** `n ^ (1 << i)`.
* **Extracting the last set bit:** `n & (-n)` or `n & (~(n - 1))`.
* **Iterating through subsets:** Using bitmasks from 0 to $2^n - 1$, where each bit represents the presence or absence of an element in the subset.
* **Dynamic Programming with Bitmasks:** Representing states using bitmasks, especially when dealing with subsets or combinations. This is common in problems like the Traveling Salesperson Problem (TSP) or covering problems.
* **Space Optimization:** Using bitsets or bit manipulation within integers to represent sets or boolean arrays more compactly.
* **Time Optimization:** Bitwise operations are often faster than arithmetic operations, leading to more efficient algorithms.

**Important Considerations:**

* **Integer Representation:** Understand how signed and unsigned integers are represented in memory (e.g., two's complement for signed integers).
* **Bit Ordering (Endianness):** While generally not a direct concern in basic bit manipulation within a single variable, it can be relevant when dealing with byte arrays or network protocols.
* **Language-Specific Details:** Be aware of how different programming languages handle bitwise operations and the size of integer types.

By mastering bit manipulation, you can unlock elegant and efficient solutions to a wide range of DSA problems, often leading to significant performance improvements.