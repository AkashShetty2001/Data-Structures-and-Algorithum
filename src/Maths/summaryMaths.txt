/*
 * ================================
 * Important Math Concepts for DSA
 * ================================
 *
 * 1Ô∏è‚É£ Time Complexity Analysis:
 *    - O(1): Constant time
 *    - O(log n): Logarithmic time (e.g., Binary Search)
 *    - O(n): Linear time (e.g., Simple Loop)
 *    - O(n log n): Linearithmic (e.g., Merge Sort, Quick Sort)
 *    - O(n^2): Quadratic time (e.g., Nested Loops)
 *
 * 2Ô∏è‚É£ Counting Digits in a Number:
 *    int count = 0;
 *    while(n > 0){
 *        n = n / 10;
 *        count++;
 *    }
 *
 * 3Ô∏è‚É£ Reverse a Number:
 *    int rev = 0;
 *    while(n > 0){
 *        int digit = n % 10;
 *        rev = rev * 10 + digit;
 *        n = n / 10;
 *    }
 *
 * 4Ô∏è‚É£ Palindrome Check (Number or String):
 *    Reverse the number/string and compare with original.
 *
 * 5Ô∏è‚É£ GCD (Euclidean Algorithm):
 *    int gcd(int a, int b){
 *        if(b == 0) return a;
 *        return gcd(b, a % b);
 *    }
 *    Time Complexity: O(log min(a, b))
 *
 * 6Ô∏è‚É£ LCM:
 *    lcm(a, b) = (a * b) / gcd(a, b)
 *
 * 7Ô∏è‚É£ Armstrong Number Check:
 *    Sum of digits^number_of_digits == original number.
 *
 * 8Ô∏è‚É£ Print All Divisors:
 *    for(int i = 1; i * i <= n; i++){
 *        if(n % i == 0){
 *            print(i);
 *            if(i != n/i) print(n/i);
 *        }
 *    }
 *    Time Complexity: O(‚àön)
 *
 * 9Ô∏è‚É£ Prime Check:
 *    Optimal Approach:
 *    for(int i = 2; i * i <= n; i++){
 *        if(n % i == 0) return false;
 *    }
 *    Time Complexity: O(‚àön)
 *
 * üîü Modulo Arithmetic:
 *    (a + b) % m = ( (a % m) + (b % m) ) % m
 *    (a - b) % m = ( (a % m) - (b % m) + m) % m
 *    (a * b) % m = ( (a % m) * (b % m) ) % m
 *
 * 1Ô∏è‚É£1Ô∏è‚É£ Time Complexity of HashMap/HashSet Operations:
 *    ‚Ä¢ Average Case: O(1) for insert, delete, search
 *    ‚Ä¢ Worst Case: O(n) (due to hash collision, but rare with good hashing function)
 *
 * ‚úÖ Remember:
 *    ‚Ä¢ Always analyze both Time and Space Complexity.
 *    ‚Ä¢ Base Case is mandatory to prevent stack overflow in recursion.
 *    ‚Ä¢ Understand how input size reduces per step in recursive calls.
 *
 * ==============================================
 * Keep this file as your reference while solving problems
 * and revising concepts.
 */
