// Recursion in Java: Important Concepts

// 1. Base Case is Essential:
//    - Every recursive method *must* have one or more base cases.
//    - The base case defines the condition(s) under which the recursion stops.
//    - Without a correct and reachable base case, your Java program will likely crash with a StackOverflowError.
//    - In Java, ensure your base case condition is clearly checked and returns a non-recursive result.
//
//    Example (Factorial):
//    public static int factorial(int n) {
//        if (n == 0) { // Base case: when n is 0, return 1
//            return 1;
//        } else {
//            return n * factorial(n - 1); // Recursive step
//        }
//    }

// 2. Recursive Step (Self-Invocation):
//    - This is where the method calls itself.
//    - The recursive call should be made with a *smaller* or *simpler* version of the original problem's input.
//    - In Java, ensure the parameters you pass in the recursive call are modified in a way that progresses towards the base case.
//
//    Example (Factorial - recursive step):
//    // return n * factorial(n - 1); // 'n-1' is a smaller input

// 3. Call Stack and Stack Overflow:
//    - Java uses a call stack to manage method invocations. Each recursive call adds a new frame to the stack.
//    - If the recursion goes too deep (no proper base case or very large input leading to many recursive calls), the call stack can exceed its limit, resulting in a StackOverflowError in your Java program.
//    - Be mindful of the potential depth of your recursion, especially for large inputs.

// 4. Return Values:
//    - Recursive methods often return a value that is built up through the chain of recursive calls.
//    - The base case typically returns a direct value.
//    - The recursive step combines the result of the recursive call with the current step's computation.
//    - In Java, ensure your recursive method has a clear return type and that values are correctly returned at each step.
//
//    Example (Factorial - return values):
//    // Base case returns 1.
//    // Recursive step returns the current 'n' multiplied by the result of the factorial of 'n-1'.

// 5. Understanding the Flow:
//    - Visualize how the method calls itself and how the results are returned back up the call stack.
//    - Tracing small examples by hand can be very helpful in understanding the execution flow of a recursive Java method.
//
//    Example (Tracing factorial(3)):
//    // factorial(3) -> 3 * factorial(2)
//    //            -> 3 * (2 * factorial(1))
//    //            -> 3 * (2 * (1 * factorial(0)))
//    //            -> 3 * (2 * (1 * 1))  // Base case reached, returns 1
//    //            -> 3 * (2 * 1)
//    //            -> 3 * 2
//    //            -> 6

// 6. Potential for Redundant Computations:
//    - Naive recursive solutions can sometimes recompute the same subproblems multiple times (e.g., Fibonacci without memoization).
//    - In Java, for performance-critical applications, consider using memoization (caching results of subproblems) to avoid redundant calculations. This often involves using data structures like HashMap in Java.
//
//    Example (Naive Fibonacci - redundant computations):
//    // fibonacci(5) calls fibonacci(4) and fibonacci(3)
//    // fibonacci(4) calls fibonacci(3) and fibonacci(2)  <- fibonacci(3) is computed twice
//    public static int fibonacci(int n) {
//        if (n <= 1) {
//            return n;
//        } else {
//            return fibonacci(n - 1) + fibonacci(n - 2);
//        }
//    }

// 7. Choosing Between Recursion and Iteration:
//    - While recursion can be elegant for certain problems, iterative solutions (using loops like for and while in Java) can sometimes be more efficient in terms of memory usage (avoiding stack overhead) and speed.
//    - Consider the trade-offs between code clarity and performance when deciding between recursion and iteration in your Java code.
//    - Tail recursion optimization (where the recursive call is the last operation) can sometimes be optimized by compilers to be as efficient as iteration, but Java's JVM doesn't fully optimize tail recursion.

// 8. Debugging Recursive Java Methods:
//    - Debugging recursive code can be a bit trickier than debugging iterative code.
//    - Use System.out.println() statements carefully to trace the input parameters and return values at each recursive call.
//    - Java debuggers allow you to step into and step over method calls, which can be helpful in understanding the flow of recursion.

// 9. Common Java Examples (Conceptual):
//    - Factorial: See example above.
//    - Fibonacci: See example above.
//    - Tree Traversals: Recursive methods for visiting nodes in a TreeNode structure (e.g., preorder, inorder, postorder).
//      // public void preorderTraversal(TreeNode root) {
//      //     if (root != null) {
//      //         System.out.println(root.val); // Process current node
//      //         preorderTraversal(root.left);   // Recurse on left subtree
//      //         preorderTraversal(root.right);  // Recurse on right subtree
//      //     }
//      // }
//    - Binary Search: Recursively searching for an element in a sorted array.
//      // public static int binarySearchRecursive(int[] arr, int target, int low, int high) {
//      //     if (low > high) {
//      //         return -1; // Target not found
//      //     }
//      //     int mid = low + (high - low) / 2;
//      //     if (arr[mid] == target) {
//      //         return mid;
//      //     } else if (arr[mid] < target) {
//      //         return binarySearchRecursive(arr, target, mid + 1, high); // Search right half
//      //     } else {
//      //         return binarySearchRecursive(arr, target, low, mid - 1);    // Search left half
//      //     }
//      // }